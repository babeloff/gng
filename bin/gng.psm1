<#
  Gradle Wrapper Module
  This module contains a set of wrapper scripts that
  enable a user to perform Gradle tasks.
 #>

$script:psprovidername = "Microsoft-Windows-PowerShell"
$script:gradlewFileName = "gradlew.bat"

# Search recursively upwards for the file.
function Invoke-Gradle {
  param(
      [Parameter(
              Mandatory=$false,
              HelpMessage=@"
The gradle task to run preceed it with a ':'.
By default runs the ':tasks' task.
"@)]
      [string]
      $task = ':tasks',

  [Parameter(
  Mandatory=$false,
  HelpMessage=@"
The working directory, defaults to current directory.
"@)]
  [string]
  $workingDir = (Get-Location)
  )

  Write-Debug "select $gradlewFileName starting in $workingDir"
  $path = if (-Not (Test-Path -Path $workingDir)) { Get-Location } else { $workingDir }
  $fileName = $script:gradlewFileName
  # https://stackoverflow.com/questions/45642517/search-directory-for-a-file-iterating-up-parent-directories-if-not-found
  while($path -and (-Not (Test-Path (Join-Path $path $fileName)))) {
    Write-Debug "candidate path $path $fileName"
    if ($path -eq ((Split-Path $path -Qualifier)+"/")) {
      break
    }
    $path = Split-Path $path -Parent
  }
  $gradlewPath = (Join-Path $path $fileName)
  if (-Not (Test-Path -Path $gradlewPath))
  {
    Write-Error "No ${gradlew} set up for this project; Please use 'Install-Gradle'."
    Exit-PSHostProcess
  }
  Write-Debug "Using gradle at '${gradlewPath}' to run"
  $gradlewDir = (Split-Path -Path $gradlewPath -Parent)
  $jsonConfFile = Join-Path $gradlewDir 'gradle/gng.json'
  $jsonConf = if (Test-Path -Path $jsonConfFile) {
      Get-Content (Join-Path (Join-Path $gradlewDir 'gradle') 'gng.json') | Out-String | ConvertFrom-Json
  } else {
      ConvertFrom-Json ''
  }
  Write-Debug "gradlew configuration '${jsonConf}'"
  $procOptions = @{
    FilePath = $gradlewPath
    WorkingDirectory = $gradlewDir
    ArgumentList = $task
    Wait = $True
    PassThru = $True
    NoNewWindow = $True
  }
  [string[]] $procOptionString = $procOptions.GetEnumerator().ForEach({ "$($_.Name)=$($_.Value)" })
  Write-Debug "gradlew command '$procOptionString'"
  Start-Process @procOptions
}

function Install-GradleWrapper {
    Param(
        [Parameter(
                Mandatory=$false,
                HelpMessage=@"
Gradle Version (default: 'latest')
Version information is from https://services.gradle.org/versions/current,
visit https://services.gradle.org/versions/all for all available versions)
"@)]
        [string]
        $version = 'latest',

        [Parameter(
                Mandatory=$false,
                HelpMessage="Gradle Distribution Type (default: 'all')")]
        [string]
        $distributionType = 'all',

        [Parameter(
                Mandatory=$false,
                HelpMessage=@"
Gradle Distribution Mirror URL Prefix
(Optional with no default value. The url prefix replaces https://services.gradle.org/distributions/)
It replaces the whole distributionUrl except the file part in a URL.
For example, if specify '-m "https://example.com/gradle/"',
then "https://services.gradle.org/distributions/gradle-6.8-all.zip"
will become "https://example.com/gradle/gradle-6.8-all.zip"
"@)]
        [string]
        $mirrorUrl,

        [Parameter(
                Mandatory=$false,
                HelpMessage=@"
The folder location where generated Gradle Wrapper(default: 'Your current working directory')
"@)]
        [string]
        $destinationDir = (Get-Location)
    )
    if ($version -eq 'latest') {
      Write-Information "Fetching the latest Gradle version from services.gradle.org"
      $gradleInfo = Invoke-WebRequest -Uri "https://services.gradle.org/versions/current" | ConvertFrom-Json
      Write-Information "The latest Gradle version is ${gradleInfo}"
    }
    $dir = if (-not (Test-Path -Path $destinationDir -PathType Container)) {
        New-Item -ItemType Directory -Force -Path (Join-Path $dir 'gradle/wrapper')
    } else { $destinationDir }
    Write-Information "Installing Gradle Wrapper in ${dir}. (version=${version}, distributionType=${distributionType}, mirrorUrl=${mirrorUrl})"

    #Copy the embedded Gradle Wrapper
    $srcDir = $PSScriptRoot
    Copy-Item -LiteralPath (Join-Path $srcDir 'gng.cfg') -Destination (Join-Path $dir 'gradle')
    Copy-Item -LiteralPath (Join-Path $srcDir 'gradlew') -Destination $dir
    Copy-Item -LiteralPath (Join-Path $srcDir 'gradlew.bat') -Destination $dir
    Copy-Item -LiteralPath (Join-Path $srcDir 'wrapper/gradle-wrapper.jar') -Destination (Join-Path $dir 'gradle/wrapper')

    $distributionUrl = $mirrorUrl -replace '[#\!=:]','\$0'
    $distributionUrl = Join-Path $distributionUrl "gradle-${version}-${type}.zip"
    @"
#Generated by GNG
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=${distributionUrl}
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
"@ | Out-File -FilePath (Join-Path $dir 'gradle/wrapper/gradle-wrapper.properties')

}


# manage certificates
# use https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html

function Get-GradleCert {
  Param(
    [Parameter(
            Mandatory=$false,
            HelpMessage=@"
host
"@)]
    [string]
    $host = 'localhost',

      [Parameter(
              Mandatory=$false,
              HelpMessage=@"
port
"@)]
      [string]
      $port = '443',

      [Parameter(
              Mandatory=$true,
              HelpMessage=@"
provide the keystore password
"@)]
      [string]
      $password
  )
  $keytoolPath = (Get-Command keytool).Source
  $keytoolDir = (Split-Path -Path $keytoolPath -Parent)
  $keystoreFile = (Join-Path -Path $keytoolDir -ChildPath '/../lib/security/cacerts')
  & keytoolPath -printcert -sslserver "${host}:${port}" -rfc | keytoolPath -import -noprompt -alias "${host}" -keystore "${keystoreFile}" -storepass "${password}"
}

Set-Alias gw Invoke-Gradle
Set-Alias gng Install-GradleWrapper

Export-ModuleMember -Function Invoke-Gradle, Install-GradleWrapper, Get-Gradle-Cert -Alias gw, gng