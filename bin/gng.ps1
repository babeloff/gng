#!/usr/bin/env pwsh

param (
  [Parameter(Mandatory=$true)][string]$task = ':tasks',
  [Parameter(Mandatory=$false)][string]$action,
  [Parameter(Mandatory=$false)][string]$version,
  [Parameter(Mandatory=$false)][string]$distributionType,
  [Parameter(Mandatory=$false)][string]$mirror,
  [Parameter(Mandatory=$false)][string]$destinationDir,
  [Parameter(Mandatory=$false)][string]$help
)

# resolve $$sourceFile until the file is no longer a symlink
$sourceFile=$PSCommandPath
$sourceDir=$PSScriptRoot
New-Variable -Option Constant -Name selfDir -Value (Get-Item -Path $sourceDir).Target

# Powershell 7 has an operator for this.
# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_operators?view=powershell-7.1#null-coalescing-operator-
function NullCoalesce($source, $default) {
  if ($source == $null) {
    return $default
  }
  return $source
}

New-Variable -Option Constant -Name debugLevel -Value (NullCoalesce $env:DEBUG 0).Target

New-Variable -Option Constant -Name debugLevel -Value (NullCoalesce $env:GRADLEW "gradlew.bat").Target

function die($message) {
  Write-Error "failure : $message"
  Exit-PSHostProcess
}


# Search recursively upwards for the file.
# https://stackoverflow.com/questions/45642517/search-directory-for-a-file-iterating-up-parent-directories-if-not-found
function lookUpwards($file, $currPath){
  $currPath = if (-not(Test-Path -Path $currPath)) { $currPath = Get-Location }

  while($path -and !(Test-Path (Join-Path $path $file))) {
    if ($path -eq ((Split-Path $path -Qualifier)+"/")) {
       break
    }
    $path = Split-Path $path -Parent
  }
  return $path
}

function cfgGet($key) {
#  for kv in "${__GNG_CONFIG[@]}"; do
#    if [[ ${kv} =~ ^${key}= ]]; then
#      trim "${kv#${key}=}"
#    fi
#  done
}

function installGng($version, $type, $mirrorUrl = 'https://services.gradle.org/distributions', $dir) {
  $dir = if (-not (Test-Path -Path $dir -PathType Container))
  {
    New-Item -ItemType Directory -Force -Path (Join-Path $dir 'gradle' 'wrapper')
  }
  
  Write-Information "Installing Gradle Wrapper in ${dir}. (version=${version}, distributionType=${type}, mirrorUrl=${mirrorUrl:-<Not Specified>})"
  
  #Copy the embedded Gradle Wrapper
  $srcDir = Split-Path -Path $selfDir -Parent
  Copy-Item -LiteralPath (Join-Path $srcDir 'gradle' 'gng.cfg') -Destination (Join-Path $dir 'gradle')
  Copy-Item -LiteralPath (Join-Path $srcDir 'gradle' 'gradlew') -Destination $dir
  Copy-Item -LiteralPath (Join-Path $srcDir 'gradle' 'gradlew.bat') -Destination $dir
  Copy-Item -LiteralPath (Join-Path $srcDir 'gradle' 'wrapper' 'gradle-warpper-jar') -Destination (Join-Path $dir 'gradle' 'wrapper')
  
  $distributionUrl = $mirrorUrl -replace '[#\!=:]','\$0'
  $distributionUrl = Join-Path $distributionUrl "gradle-${version}-${type}.zip"
  @"
#Generated by GNG
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=${distributionUrl}
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
"@ | Out-File -FilePath (Join-Path $dir 'gradle' 'wrapper' 'gradle-wrapper.properties')
}

# Pick the project's lowest level gradle command.
function selectGradle($dir) {
  $gradlew = lookUpwards $gradlew $dir
  if (-not (Test-Path -Path $gradlew))
  {
    die "No ${gradlew} set up for this project; Please use 'gng wrapper' installing a Gradle Wrapper'."
  }
  Write-Information "${gradlew}"
  return 0
}

function gradle($task, $action) {
  $gradle = selectGradle (Get-Location).Path
  Write-Debug "Using gradle at '${gradle}' to run"
  $jsonConf = Get-Content (Join-Path $gradleDir 'gradle' 'gng.json') | Out-String | ConvertFrom-Json
  $gradleDir = (Split-Path -Path $gradle -Parent)
  loadConfig $gradleDir
  $procOptions = @{
    FilePath = $gradle
    WorkingDirectory = $gradleDir
    ArgumentList = $task,$action
  }
  Start-Process @procOptions
}

function bootstrap_help {
  Write-Host @"
Generates a Gradle Wrapper
Usage: gng wrapper [-v|--version <arg>] [-t|--distribution-type <arg>] [-m|--mirror <arg>] [-h|--help] [ -d|--destination-dir <arg>
-v, --version: Gradle Version (default: 'latest', version information is from https://services.gradle.org/versions/current, visit https://services.gradle.org/versions/all for all available versions)
-t, --distribution-type: Gradle Distribution Type (default: 'all')
-m, --mirror: Gradle Distribution Mirror URL Prefix(Optional with no default value, The url prefix replaces https://services.gradle.org/distributions/)
              It replaces the whole distributionUrl except the file part in a URL. For example, if specify '-m "https://example.com/gradle/"', then
              "https://services.gradle.org/distributions/gradle-6.8-all.zip" will become "https://example.com/gradle/gradle-6.8-all.zip"
-d, --destination-dir : The folder location where generated Gradle Wrapper(default: 'Your current working directory')
-h, --help: Prints help
"@
}

function bootstrap($argVersion = "latest", $argDistType = "all") {
  $argDestinationDir = Get-Location

  if ($version -eq 'latest') {
    Write-Information "Fetching the latest Gradle version from services.gradle.org"
    $gradleInfo = Invoke-WebRequest -Uri "https://services.gradle.org/versions/current" | ConvertFrom-Json
    Write-Information "The latest Gradle version is ${gradleInfo}"
  }

  installGw $gradleInfo $argDistType $mirror $argDestinationDir
}


# manage certificates
# use https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html
function trust($host,$port = 443) {
#  local KEYSTORE_FILE
#  KEYSTORE_FILE="$(readlink -e "$(dirname "$(readlink -e "$(which keytool)")")")"/../lib/security/cacerts
#  local KEYSTORE_PASS="${KEYSTORE_PASS:-changeit}"
#  keytool -printcert -sslserver "${HOST}:${PORT}" -rfc | keytool -import -noprompt -alias "${HOST}" -keystore "${KEYSTORE_FILE}" -storepass "${KEYSTORE_PASS}"
}


Switch -Exact ($task) {
  'trust' {
    trust $action
  }
  'wrapper' {
    bootstrap $action
  }
  Default {
    gradle $task $action
  }
}
